{"version":3,"file":"static/webpack/static\\development\\pages\\vote.js.34202f68c062943a5d58.hot-update.js","sources":["webpack:///./pages/vote.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport Layout from '../Components/Layout'\r\nimport {Link, Router} from '../routes'\r\nimport { Grid, Card, Input, Button, Message } from 'semantic-ui-react'\r\nimport voting from '../Ethereum/voting'\r\nimport web3 from '../Ethereum/web3'\r\n\r\nclass votingPage extends Component {\r\n\r\n    state = {\r\n        id : 0,\r\n        Loading : false,\r\n        errorMessage : ''\r\n    }\r\n\r\n    static getInitialProps = async (props) =>{\r\n\r\n        const locale = pro;\r\n        const numCandidates = await voting.methods.getNumCandidate().call()\r\n\r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element,index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n\r\n        return {\r\n            numCandidates : numCandidates,\r\n            candidates : candidates,\r\n            locale : locale\r\n        }\r\n    }\r\n\r\n    renderCandidates = () =>{\r\n        const items =  this.props.candidates.map((candidate,index) =>{\r\n            return{\r\n                header : candidate.name,\r\n                meta : index,\r\n                description : candidate.partyName\r\n            }\r\n        });\r\n\r\n        return <Card.Group textAlign = \"center\" centered items = {items} />\r\n    }\r\n    \r\n    onSubmit = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        this.setState({Loading : true, errorMessage : ''})\r\n        try{\r\n            const transaction = await voting.methods.vote(this.state.id).send({from : accounts[0]})\r\n\r\n            const timestamp = await web3.eth.getBlock(transaction.blockNumber);\r\n            const unix_t = timestamp.timestamp;\r\n            const date = new Date(unix_t * 1000);\r\n            const hours = date.getHours();\r\n            const minutes = \"0\" + date.getMinutes();\r\n            const seconds = \"0\" + date.getSeconds();\r\n\r\n            const time = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n            const bN = (transaction.blockNumber).toString();\r\n            const tH = transaction.transactionHash;\r\n            const bH = transaction.blockHash;\r\n            const sA = transaction.from;\r\n\r\n            await voting.methods.addTransactions(\r\n                sA,tH, bH, bN, time).send({from : accounts[0]})\r\n\r\n            Router.pushRoute(`/${this.props.locale}/votingTable`)\r\n        }catch(err){\r\n            this.setState({errorMessage : err.message})\r\n        }\r\n        \r\n        this.setState({Loading : false, id : ''})\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <Layout>\r\n                <Grid textAlign = \"center\">\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Link route = {`/${this.props.locale}`}>\r\n                                <a>\r\n                                    Homepage\r\n                                </a>\r\n                            </Link>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            {this.renderCandidates()}\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Input \r\n                                value = {this.state.id}\r\n                                onChange = {event => this.setState({id : event.target.value})}\r\n                                fluid\r\n                            />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button primary loading = {this.state.Loading} onClick = {this.onSubmit}>\r\n                                Vote\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default votingPage;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAHA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAOA;AAAA;AACA;AARA;AAOA;AAPA;AAAA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAuBA;AAAA;AACA;AAxBA;AAyBA;AAzBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA0BA;AAAA;AAAA;AACA;AA5BA;AA8BA;AAAA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAgCA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AASA;AAAA;AAAA;AAAA;AAQA;;;;AA9GA;AACA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AASA;AACA;AACA;AAXA;AAKA;AALA;AAcA;AACA;AACA;AAHA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwGA;;;;A","sourceRoot":""}