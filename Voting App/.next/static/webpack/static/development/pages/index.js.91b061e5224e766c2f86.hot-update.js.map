{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.91b061e5224e766c2f86.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../Components/Layout'\r\nimport voting from '../Ethereum/voting'\r\nimport {Card, Grid, Button, Table} from 'semantic-ui-react'\r\nimport {Link, Router} from '../routes';\r\nimport RequestRow from '../Components/RequestRow'\r\nimport axios from 'axios';\r\nimport web3 from '../Ethereum/web3'\r\n\r\nclass votingInstance extends Component{\r\n\r\n    state ={\r\n        message : '',\r\n        Loading : false,\r\n        errorMessage : '',\r\n        addLoading : false\r\n    }\r\n\r\n    static getInitialProps = async () =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call();\r\n        \r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element, index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n        \r\n\r\n        return{\r\n            address : voting.options.address,\r\n            number : numCandidates,\r\n            candidates : candidates\r\n        }\r\n    }\r\n\r\n    renderRow(){\r\n        return this.props.candidates.map((candidate,index) =>{\r\n            return <RequestRow \r\n                key = {index}\r\n                id = {index}\r\n                candidate  = {candidate}\r\n            />\r\n        });\r\n    }\r\n\r\n    onAddCandidates = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n        const res = await axios.get('http://localhost:5000/candidates');\r\n        console.log(res.data)\r\n        console.log(accounts[0]);\r\n        \r\n        //for( var i = 2; i < 7; i++ ){\r\n            try{\r\n                this.setState({addLoading : true, errorMessage : ''})\r\n                await voting.methods.addCandidate(res.data[1].name,res.data[0].partyName)\r\n                .send({from : accounts[0]})\r\n                Router.pushRoute('/');\r\n            } catch(err){\r\n                this.setState({errorMessage : err.message})\r\n            }\r\n            this.setState({addLoading : false})\r\n        //}  \r\n        //Router.pushRoute('/index');    \r\n    }\r\n\r\n    onClick = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        \r\n        var largest = 0;\r\n        var index;\r\n\r\n        for ( var i = 0 ; i < this.props.number ; i++ ){\r\n            \r\n            if(this.props.candidates[i].voteCount > largest){\r\n                largest = this.props.candidates[i].voteCount;\r\n                index = i;\r\n            }\r\n            \r\n        }\r\n\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n        console.log(winningCandidate);\r\n        this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        const { Header,Row, HeaderCell, Body } = Table; \r\n        return(\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column floated = \"left\" width = {8}>\r\n                            <Card fluid>\r\n                                <Card.Content >\r\n                                    <Card.Header>{this.props.address}</Card.Header>\r\n                                    <Card.Meta>Election Address And Number of Candidates : {this.props.number}</Card.Meta>\r\n                                    <Card.Description>This the Address on which the Election Contract has been deployed</Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column floated = 'right' width = {2}>\r\n                                <Link route = '/votingTable'>\r\n                                    <a>\r\n                                        <Button primary>Voter's Info</Button>\r\n                                    </a>\r\n                                </Link>\r\n                            </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                icon = \"add circle\"\r\n                                content = \"Add Candidate\"\r\n                                onClick = {this.onAddCandidates}\r\n                                loading = {this.state.addLoading}\r\n                            />\r\n                            <Link route = '/vote'>\r\n                                <a>\r\n                                    <Button  floated = \"right\" primary>Go to Vote</Button>    \r\n                                </a>\r\n                            </Link>\r\n                            \r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Table celled textAlign = \"center\">\r\n                                <Header>\r\n                                    <Row>\r\n                                        <HeaderCell>Candidate's ID</HeaderCell>\r\n                                        <HeaderCell>Candidate's Name</HeaderCell>\r\n                                        <HeaderCell>Candidate's Party</HeaderCell>\r\n                                        <HeaderCell>Count</HeaderCell>\r\n                                    </Row>\r\n                                </Header>\r\n                                <Body>\r\n                                    {this.renderRow()}\r\n                                </Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                loading = {this.state.Loading} \r\n                                onClick = {this.onClick}\r\n                            >\r\n                                Pick a Winner\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <h3>{this.state.message}</h3>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>    \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default votingInstance;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAPA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AAXA;AAAA;AAYA;AAAA;AACA;AAbA;AAaA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AACA;AAhBA;AAiBA;AAAA;AAAA;AAEA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAfA;AAAA;AACA;AADA;AAgBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAjCA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AA8CA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AACA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAEA;AAAA;AAAA;AAQA;AAAA;AAAA;AAkBA;AACA;AACA;AAHA;AAiBA;;;;AAhKA;AACA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAQA;AACA;AACA;AAVA;AAIA;AAJA;AAcA;AACA;AACA;AAHA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyJA;;;;A","sourceRoot":""}