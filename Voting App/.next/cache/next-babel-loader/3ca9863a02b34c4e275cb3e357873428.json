{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport web3 from '../Ethereum/web3';\nimport compiledVoting from '../Ethereum/build/Election.json';\n\nclass votingInstance extends Component {\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h3\", null, \"Contract is deployed to : \", this.props.address), __jsx(\"h3\", null, \"Contract is deployed by : \", this.props.manager));\n  }\n\n}\n\n_defineProperty(votingInstance, \"getInitialProps\", async () => {\n  const accounts = await web3.eth.getAccounts(); //console.log(\"Attempting to deploy from : \", accounts[0])\n\n  const voting = await new web3.eth.Contract(JSON.parse(compiledVoting.interface)).deploy({\n    data: '0x' + compiledVoting.bytecode\n  }).send({\n    from: accounts[0]\n  }); //console.log(\"Contract is deployed to : \", voting.options.address);\n  //console.log(\"Contract is deployed to : \", voting.options.address);\n  //const Voting = await voting.methods.owner().call()\n\n  return {\n    address: voting.options.address,\n    manager: accounts[0]\n  };\n});\n\nexport default votingInstance;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/Voting App/pages/index.js"],"names":["React","Component","web3","compiledVoting","votingInstance","render","props","address","manager","accounts","eth","getAccounts","voting","Contract","JSON","parse","interface","deploy","data","bytecode","send","from","options"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,cAAN,SAA6BH,SAA7B,CAAsC;AAsBlCI,EAAAA,MAAM,GAAE;AACJ,WACI,mBACI,gDAA+B,KAAKC,KAAL,CAAWC,OAA1C,CADJ,EAEI,gDAA+B,KAAKD,KAAL,CAAWE,OAA1C,CAFJ,CADJ;AAMH;;AA7BiC;;gBAAhCJ,c,qBAEuB,YAAW;AAEhC,QAAMK,QAAQ,GAAG,MAAMP,IAAI,CAACQ,GAAL,CAASC,WAAT,EAAvB,CAFgC,CAIhC;;AAEA,QAAMC,MAAM,GAAG,MAAM,IAAIV,IAAI,CAACQ,GAAL,CAASG,QAAb,CAAsBC,IAAI,CAACC,KAAL,CAAWZ,cAAc,CAACa,SAA1B,CAAtB,EACpBC,MADoB,CACb;AAACC,IAAAA,IAAI,EAAG,OAAOf,cAAc,CAACgB;AAA9B,GADa,EAEpBC,IAFoB,CAEf;AAACC,IAAAA,IAAI,EAAGZ,QAAQ,CAAC,CAAD;AAAhB,GAFe,CAArB,CANgC,CAUhC;AACA;AACA;;AAEA,SAAM;AACFF,IAAAA,OAAO,EAAGK,MAAM,CAACU,OAAP,CAAef,OADvB;AAEFC,IAAAA,OAAO,EAAGC,QAAQ,CAAC,CAAD;AAFhB,GAAN;AAIH,C;;AAYL,eAAeL,cAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport web3 from '../Ethereum/web3'\r\nimport compiledVoting from '../Ethereum/build/Election.json'\r\n\r\nclass votingInstance extends Component{\r\n\r\n    static getInitialProps = async() => {\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        //console.log(\"Attempting to deploy from : \", accounts[0])\r\n\r\n        const voting = await new web3.eth.Contract(JSON.parse(compiledVoting.interface))\r\n        .deploy({data : '0x' + compiledVoting.bytecode})\r\n        .send({from : accounts[0]})\r\n\r\n        //console.log(\"Contract is deployed to : \", voting.options.address);\r\n        //console.log(\"Contract is deployed to : \", voting.options.address);\r\n        //const Voting = await voting.methods.owner().call()\r\n\r\n        return{\r\n            address : voting.options.address,\r\n            manager : accounts[0]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h3>Contract is deployed to : {this.props.address}</h3>            \r\n                <h3>Contract is deployed by : {this.props.manager}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default votingInstance;"]},"metadata":{},"sourceType":"module"}