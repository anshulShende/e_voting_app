{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport voting from '../Ethereum/voting';\nimport { Card, Grid, Button, Table } from 'semantic-ui-react';\nimport { Link } from '../routes';\nimport RequestRow from '../Components/RequestRow';\nimport web3 from '../Ethereum/web3';\n\nclass votingInstance extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      message: ''\n    });\n\n    _defineProperty(this, \"onClick\", async event => {\n      event.preventDefault();\n      const winner = await voting.methods.totalVotes().call();\n      console.log(winner);\n      await voting.methods.Winner.call();\n      const index = await voting.methods.winningIndex().call();\n      console.log(index);\n      const winningCandidate = await voting.methods.candidates(index).call();\n      console.log(winningCandidate);\n      this.setState({\n        message: winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" \"\n      });\n    });\n  }\n\n  renderRow() {\n    return this.props.candidates.map((candidate, index) => {\n      return __jsx(RequestRow, {\n        key: index,\n        id: index,\n        candidate: candidate\n      });\n    });\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body\n    } = Table;\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      floated: \"left\",\n      width: 8\n    }, __jsx(Card, {\n      fluid: true\n    }, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.address), __jsx(Card.Meta, null, \"Election Address And Number of Candidates : \", this.props.number), __jsx(Card.Description, null, \"This the Address on which the Election Contract has been deployed\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Link, {\n      route: \"/candidates/new\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      primary: true,\n      icon: \"add circle\",\n      content: \"Add Candidate\"\n    }))), __jsx(Link, {\n      route: \"/vote\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      floated: \"right\",\n      primary: true\n    }, \"Go to Vote\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Table, {\n      celled: true,\n      textAlign: \"center\"\n    }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Candidate's ID\"), __jsx(HeaderCell, null, \"Candidate's Name\"), __jsx(HeaderCell, null, \"Candidate's Party\"), __jsx(HeaderCell, null, \"Count\"))), __jsx(Body, null, this.renderRow())))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n      primary: true,\n      loading: this.state.Loading,\n      onClick: this.onClick\n    }, \"Pick a Winner\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null)))));\n  }\n\n}\n\n_defineProperty(votingInstance, \"getInitialProps\", async () => {\n  const numCandidates = await voting.methods.getNumCandidate().call();\n  const candidates = await Promise.all(Array(parseInt(numCandidates)).fill().map((element, index) => {\n    return voting.methods.candidates(index).call();\n  }));\n  return {\n    address: voting.options.address,\n    number: numCandidates,\n    candidates: candidates\n  };\n});\n\nexport default votingInstance;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/Voting App/pages/index.js"],"names":["React","Component","Layout","voting","Card","Grid","Button","Table","Link","RequestRow","web3","votingInstance","message","event","preventDefault","winner","methods","totalVotes","call","console","log","Winner","index","winningIndex","winningCandidate","candidates","setState","renderRow","props","map","candidate","render","Header","Row","HeaderCell","Body","address","number","state","Loading","onClick","numCandidates","getNumCandidate","Promise","all","Array","parseInt","fill","element","options"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../Components/Layout'\r\nimport voting from '../Ethereum/voting'\r\nimport {Card, Grid, Button, Table} from 'semantic-ui-react'\r\nimport {Link} from '../routes';\r\nimport RequestRow from '../Components/RequestRow'\r\nimport web3 from '../Ethereum/web3'\r\n\r\nclass votingInstance extends Component{\r\n\r\n    state ={\r\n        message : '',\r\n    }\r\n\r\n    static getInitialProps = async () =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call();\r\n        \r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element, index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n\r\n        return{\r\n            address : voting.options.address,\r\n            number : numCandidates,\r\n            candidates : candidates\r\n        }\r\n    }\r\n\r\n    renderRow(){\r\n        return this.props.candidates.map((candidate,index) =>{\r\n            return <RequestRow \r\n                key = {index}\r\n                id = {index}\r\n                candidate  = {candidate}\r\n            />\r\n        });\r\n    }\r\n\r\n    onClick = async(event) =>{\r\n        event.preventDefault();\r\n\r\n\r\n\r\n        const winner = await voting.methods.totalVotes().call();\r\n        console.log(winner)\r\n        await voting.methods.Winner.call();\r\n        const index = await voting.methods.winningIndex().call()\r\n        console.log(index);\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n        console.log(winningCandidate);\r\n        this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" \"})\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        const { Header,Row, HeaderCell, Body } = Table; \r\n\r\n        return(\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column floated = \"left\" width = {8}>\r\n                            <Card fluid>\r\n                                <Card.Content >\r\n                                    <Card.Header>{this.props.address}</Card.Header>\r\n                                    <Card.Meta>Election Address And Number of Candidates : {this.props.number}</Card.Meta>\r\n                                    <Card.Description>This the Address on which the Election Contract has been deployed</Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Link route = '/candidates/new'>\r\n                                <a>\r\n                                    <Button \r\n                                        primary \r\n                                        icon = \"add circle\"\r\n                                        content = \"Add Candidate\" \r\n                                    />\r\n                                </a>\r\n                            </Link>\r\n                            <Link route = '/vote'>\r\n                                <a>\r\n                                    <Button  floated = \"right\" primary>Go to Vote</Button>    \r\n                                </a>\r\n                            </Link>\r\n                            \r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Table celled textAlign = \"center\">\r\n                                <Header>\r\n                                    <Row>\r\n                                        <HeaderCell>Candidate's ID</HeaderCell>\r\n                                        <HeaderCell>Candidate's Name</HeaderCell>\r\n                                        <HeaderCell>Candidate's Party</HeaderCell>\r\n                                        <HeaderCell>Count</HeaderCell>\r\n                                    </Row>\r\n                                </Header>\r\n                                <Body>\r\n                                    {this.renderRow()}\r\n                                </Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                loading = {this.state.Loading} \r\n                                onClick = {this.onClick}\r\n                            >\r\n                                Pick a Winner\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <h3></h3>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>    \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default votingInstance;"]},"metadata":{},"sourceType":"module"}