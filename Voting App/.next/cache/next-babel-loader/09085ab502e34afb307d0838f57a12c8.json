{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport { Link, Router } from '../routes';\nimport { Grid, Card, Input, Button, Message } from 'semantic-ui-react';\nimport voting from '../Ethereum/voting';\nimport web3 from '../Ethereum/web3';\n\nclass votingPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      id: 0,\n      Loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"renderCandidates\", () => {\n      const items = this.props.candidates.map((candidate, index) => {\n        return {\n          header: candidate.name,\n          meta: index,\n          description: candidate.partyName\n        };\n      });\n      return __jsx(Card.Group, {\n        textAlign: \"center\",\n        centered: true,\n        items: items\n      });\n    });\n\n    _defineProperty(this, \"convertToNormalTime\", unix_t => {});\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        Loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        const transaction = await voting.methods.vote(this.state.id).send({\n          from: accounts[0]\n        });\n        console.log(transaction.blockNumber);\n        const timestamp = await web3.eth.getBlock(transaction.blockNumber);\n        console.log(timestamp);\n        console.log(timestamp.timestamp);\n        var date = new Date(unix_t * 1000);\n        var hours = date.getHours();\n        var minutes = \"0\" + date.getMinutes();\n        var seconds = \"0\" + date.getSeconds();\n        var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n        const time = convertToNormalTime(timestamp.timestamp);\n        console.log(time); //Router.pushRoute(`/vote/${transaction}`)\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        Loading: false,\n        id: ''\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Grid, {\n      textAlign: \"center\"\n    }, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Link, {\n      route: \"/\"\n    }, __jsx(\"a\", null, \"Homepage\")))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, this.renderCandidates())), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Input, {\n      value: this.state.id,\n      onChange: event => this.setState({\n        id: event.target.value\n      }),\n      fluid: true\n    }))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n      primary: true,\n      loading: this.state.Loading,\n      onClick: this.onSubmit\n    }, \"Vote\")))));\n  }\n\n}\n\n_defineProperty(votingPage, \"getInitialProps\", async props => {\n  const numCandidates = await voting.methods.getNumCandidate().call();\n  const candidates = await Promise.all(Array(parseInt(numCandidates)).fill().map((element, index) => {\n    return voting.methods.candidates(index).call();\n  }));\n  return {\n    numCandidates: numCandidates,\n    candidates: candidates\n  };\n});\n\nexport default votingPage;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/Voting App/pages/vote.js"],"names":["React","Component","Layout","Link","Router","Grid","Card","Input","Button","Message","voting","web3","votingPage","id","Loading","errorMessage","items","props","candidates","map","candidate","index","header","name","meta","description","partyName","unix_t","event","preventDefault","accounts","eth","getAccounts","setState","transaction","methods","vote","state","send","from","console","log","blockNumber","timestamp","getBlock","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","time","convertToNormalTime","err","message","render","renderCandidates","target","value","onSubmit","numCandidates","getNumCandidate","call","Promise","all","Array","parseInt","fill","element"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Layout from '../Components/Layout'\r\nimport {Link, Router} from '../routes'\r\nimport { Grid, Card, Input, Button, Message } from 'semantic-ui-react'\r\nimport voting from '../Ethereum/voting'\r\nimport web3 from '../Ethereum/web3'\r\n\r\nclass votingPage extends Component {\r\n\r\n    state = {\r\n        id : 0,\r\n        Loading : false,\r\n        errorMessage : ''\r\n    }\r\n\r\n    static getInitialProps = async (props) =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call()\r\n\r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element,index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n\r\n        return {\r\n            numCandidates : numCandidates,\r\n            candidates : candidates,\r\n        }\r\n    }\r\n\r\n    renderCandidates = () =>{\r\n        const items =  this.props.candidates.map((candidate,index) =>{\r\n            return{\r\n                header : candidate.name,\r\n                meta : index,\r\n                description : candidate.partyName\r\n            }\r\n        });\r\n\r\n        return <Card.Group textAlign = \"center\" centered items = {items} />\r\n    }\r\n\r\n    convertToNormalTime = (unix_t) =>{\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    onSubmit = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        this.setState({Loading : true, errorMessage : ''})\r\n        try{\r\n            const transaction = await voting.methods.vote(this.state.id).send({from : accounts[0]})\r\n            console.log(transaction.blockNumber);\r\n            const timestamp = await web3.eth.getBlock(transaction.blockNumber);\r\n            console.log(timestamp);\r\n            console.log(timestamp.timestamp);\r\n\r\n            var date = new Date(unix_t * 1000);\r\n            var hours = date.getHours();\r\n            var minutes = \"0\" + date.getMinutes();\r\n            var seconds = \"0\" + date.getSeconds();\r\n            var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n\r\n            const time = convertToNormalTime(timestamp.timestamp);\r\n            console.log(time);\r\n            //Router.pushRoute(`/vote/${transaction}`)\r\n        }catch(err){\r\n            this.setState({errorMessage : err.message})\r\n        }\r\n        \r\n        this.setState({Loading : false, id : ''})\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <Layout>\r\n                <Grid textAlign = \"center\">\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Link route ='/'>\r\n                                <a>\r\n                                    Homepage\r\n                                </a>\r\n                            </Link>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            {this.renderCandidates()}\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Input \r\n                                value = {this.state.id}\r\n                                onChange = {event => this.setState({id : event.target.value})}\r\n                                fluid\r\n                            />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button primary loading = {this.state.Loading} onClick = {this.onSubmit}>\r\n                                Vote\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default votingPage;"]},"metadata":{},"sourceType":"module"}