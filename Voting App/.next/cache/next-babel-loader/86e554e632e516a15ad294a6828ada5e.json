{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport voting from '../Ethereum/voting';\nimport { Card, Grid, Button, Table, Popup } from 'semantic-ui-react';\nimport { Link, Router } from '../routes';\nimport RequestRow from '../Components/RequestRow';\nimport axios from 'axios';\nimport web3 from '../Ethereum/web3';\nvar number = 4;\n\nclass votingInstance extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      message: '',\n      Loading: false,\n      errorMessage: '',\n      addLoading: false,\n      isButtonDisabled: false,\n      popupContent: 'Click this button to add candidates'\n    });\n\n    _defineProperty(this, \"onAddCandidates\", async event => {\n      if (!this.state.isButtonDisabled) {\n        event.preventDefault();\n        const accounts = await web3.eth.getAccounts();\n        const res = await axios.get(`http://localhost:5000/candidates/${this.props.locale}`);\n        console.log(res.data);\n        console.log(accounts[0]);\n\n        for (var i = 0; i < res.data.length; i++) {\n          try {\n            this.setState({\n              addLoading: true,\n              errorMessage: ''\n            });\n            await voting.methods.addCandidate(res.data[i].name, res.data[i].partyName).send({\n              from: accounts[0]\n            });\n            Router.pushRoute(`/${this.props.locale}`);\n          } catch (err) {\n            this.setState({\n              errorMessage: err.message\n            });\n          }\n\n          this.setState({\n            addLoading: false\n          });\n        }\n\n        this.setState({\n          isButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          popupContent: 'The Candidates have been added'\n        });\n      }\n    });\n\n    _defineProperty(this, \"onClick\", async event => {\n      event.preventDefault();\n      console.log(number);\n      number--;\n      /*\r\n      \r\n      var largest = 0;\r\n      var index;\r\n        for ( var i = 0 ; i < this.props.number ; i++ ){\r\n          \r\n          if(this.props.candidates[i].voteCount > largest){\r\n              largest = this.props.candidates[i].voteCount;\r\n              index = i;\r\n          }\r\n          \r\n      }\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n      console.log(winningCandidate);\r\n      this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n      */\n    });\n  }\n\n  renderRow() {\n    return this.props.candidates.map((candidate, index) => {\n      return __jsx(RequestRow, {\n        key: index,\n        id: index,\n        candidate: candidate\n      });\n    });\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body\n    } = Table;\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      floated: \"left\",\n      width: 8\n    }, __jsx(Card, {\n      fluid: true\n    }, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.address), __jsx(Card.Meta, null, \"Election Address And Number of Candidates : \", this.props.number), __jsx(Card.Description, null, \"This the Address on which the Election Contract has been deployed\")))), __jsx(Grid.Column, {\n      floated: \"right\",\n      width: 2\n    }, __jsx(Link, {\n      route: `/${this.props.locale}/votingTable`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      primary: true\n    }, \"Voter's Info\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Popup, {\n      content: this.state.popupContent,\n      on: \"click\",\n      pinned: true,\n      trigger: __jsx(Button, {\n        primary: true,\n        icon: \"add circle\",\n        content: \"Add Candidate\",\n        onClick: this.onAddCandidates,\n        loading: this.state.addLoading\n      })\n    }), __jsx(Link, {\n      route: `/${this.props.locale}/vote`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      floated: \"right\",\n      primary: true\n    }, \"Go to Vote\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Table, {\n      celled: true,\n      textAlign: \"center\"\n    }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Candidate's ID\"), __jsx(HeaderCell, null, \"Candidate's Name\"), __jsx(HeaderCell, null, \"Candidate's Party\"), __jsx(HeaderCell, null, \"Count\"))), __jsx(Body, null, this.renderRow())))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n      primary: true,\n      loading: this.state.Loading,\n      onClick: this.onClick\n    }, \"Pick a Winner\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, this.state.message)))));\n  }\n\n}\n\n_defineProperty(votingInstance, \"getInitialProps\", async props => {\n  const numCandidates = await voting.methods.getNumCandidate().call();\n  const locale = props.query.locale;\n  const candidates = await Promise.all(Array(parseInt(numCandidates)).fill().map((element, index) => {\n    return voting.methods.candidates(index).call();\n  }));\n  return {\n    address: voting.options.address,\n    number: numCandidates,\n    candidates: candidates,\n    locale: locale\n  };\n});\n\nexport default votingInstance;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/e_voting_app/Voting App/pages/index.js"],"names":["React","Component","Layout","voting","Card","Grid","Button","Table","Popup","Link","Router","RequestRow","axios","web3","number","votingInstance","message","Loading","errorMessage","addLoading","isButtonDisabled","popupContent","event","state","preventDefault","accounts","eth","getAccounts","res","get","props","locale","console","log","data","i","length","setState","methods","addCandidate","name","partyName","send","from","pushRoute","err","renderRow","candidates","map","candidate","index","render","Header","Row","HeaderCell","Body","address","onAddCandidates","onClick","numCandidates","getNumCandidate","call","query","Promise","all","Array","parseInt","fill","element","options"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../Components/Layout'\r\nimport voting from '../Ethereum/voting'\r\nimport {Card, Grid, Button, Table, Popup} from 'semantic-ui-react'\r\nimport {Link, Router} from '../routes';\r\nimport RequestRow from '../Components/RequestRow'\r\nimport axios from 'axios';\r\nimport web3 from '../Ethereum/web3'\r\n\r\nvar number = 4\r\n\r\nclass votingInstance extends Component{\r\n\r\n    state ={\r\n        message : '',\r\n        Loading : false,\r\n        errorMessage : '',\r\n        addLoading : false,\r\n        isButtonDisabled : false,\r\n        popupContent : 'Click this button to add candidates'\r\n    }\r\n\r\n    static getInitialProps = async (props) =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call();\r\n        const locale = props.query.locale;\r\n        \r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element, index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n\r\n        return{\r\n            address : voting.options.address,\r\n            number : numCandidates,\r\n            candidates : candidates,\r\n            locale : locale\r\n        }\r\n    }\r\n\r\n    renderRow(){\r\n        return this.props.candidates.map((candidate,index) =>{\r\n            return <RequestRow \r\n                key = {index}\r\n                id = {index}\r\n                candidate  = {candidate}\r\n            />\r\n        });\r\n    }\r\n\r\n    onAddCandidates = async(event) =>{\r\n\r\n        if(!this.state.isButtonDisabled){\r\n            event.preventDefault();\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n            const res = await axios.get(`http://localhost:5000/candidates/${this.props.locale}`);\r\n            console.log(res.data)\r\n            console.log(accounts[0]);\r\n            \r\n            for( var i = 0; i < res.data.length; i++ ){\r\n                try{\r\n                    this.setState({addLoading : true, errorMessage : ''})\r\n                    await voting.methods.addCandidate(res.data[i].name,res.data[i].partyName)\r\n                    .send({from : accounts[0]})\r\n                    Router.pushRoute(`/${this.props.locale}`);\r\n                } catch(err){\r\n                    this.setState({errorMessage : err.message})\r\n                }\r\n                this.setState({addLoading : false})\r\n            }     \r\n            this.setState({isButtonDisabled : true})\r\n        }\r\n        else{\r\n            this.setState({popupContent : 'The Candidates have been added'})\r\n        }\r\n        \r\n    }\r\n\r\n    onClick = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        console.log(number);\r\n        number--\r\n        /*\r\n        \r\n        var largest = 0;\r\n        var index;\r\n\r\n        for ( var i = 0 ; i < this.props.number ; i++ ){\r\n            \r\n            if(this.props.candidates[i].voteCount > largest){\r\n                largest = this.props.candidates[i].voteCount;\r\n                index = i;\r\n            }\r\n            \r\n        }\r\n\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n        console.log(winningCandidate);\r\n        this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n        */\r\n    }\r\n\r\n    render(){\r\n\r\n        const { Header,Row, HeaderCell, Body } = Table; \r\n        return(\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column floated = \"left\" width = {8}>\r\n                            <Card fluid>\r\n                                <Card.Content >\r\n                                    <Card.Header>{this.props.address}</Card.Header>\r\n                                    <Card.Meta>Election Address And Number of Candidates : {this.props.number}</Card.Meta>\r\n                                    <Card.Description>This the Address on which the Election Contract has been deployed</Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column floated = 'right' width = {2}>\r\n                                <Link route = {`/${this.props.locale}/votingTable`}>\r\n                                    <a>\r\n                                        <Button primary>Voter's Info</Button>\r\n                                    </a>\r\n                                </Link>\r\n                            </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Popup\r\n                                content = {this.state.popupContent}\r\n                                on = \"click\"\r\n                                pinned\r\n                                trigger = {<Button \r\n                                    primary \r\n                                    icon = \"add circle\"\r\n                                    content = \"Add Candidate\"\r\n                                    onClick = {this.onAddCandidates}\r\n                                    loading = {this.state.addLoading}\r\n                                    />}\r\n                            />\r\n                            <Link route = {`/${this.props.locale}/vote`}>\r\n                                <a>\r\n                                    <Button  floated = \"right\" primary>Go to Vote</Button>    \r\n                                </a>\r\n                            </Link>\r\n                            \r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Table celled textAlign = \"center\">\r\n                                <Header>\r\n                                    <Row>\r\n                                        <HeaderCell>Candidate's ID</HeaderCell>\r\n                                        <HeaderCell>Candidate's Name</HeaderCell>\r\n                                        <HeaderCell>Candidate's Party</HeaderCell>\r\n                                        <HeaderCell>Count</HeaderCell>\r\n                                    </Row>\r\n                                </Header>\r\n                                <Body>\r\n                                    {this.renderRow()}\r\n                                </Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                loading = {this.state.Loading} \r\n                                onClick = {this.onClick}\r\n                            >\r\n                                Pick a Winner\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <h3>{this.state.message}</h3>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>    \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default votingInstance;"]},"metadata":{},"sourceType":"module"}