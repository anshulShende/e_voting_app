{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport voting from '../Ethereum/voting';\nimport { Card, Grid, Button, Table } from 'semantic-ui-react';\nimport { Link, Router } from '../routes';\nimport RequestRow from '../Components/RequestRow';\nimport axios from 'axios';\nimport web3 from '../Ethereum/web3';\n\nvar votingInstance = /*#__PURE__*/function (_Component) {\n  _inherits(votingInstance, _Component);\n\n  var _super = _createSuper(votingInstance);\n\n  function votingInstance() {\n    var _this;\n\n    _classCallCheck(this, votingInstance);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      message: '',\n      Loading: false,\n      errorMessage: '',\n      addLoading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddCandidates\", function _callee(event) {\n      var accounts, res, i;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 3:\n              accounts = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(axios.get('http://localhost:5000/candidates'));\n\n            case 6:\n              res = _context.sent;\n              console.log(res.data);\n              console.log(accounts[0]);\n              i = 2;\n\n            case 10:\n              if (!(i < 7)) {\n                _context.next = 24;\n                break;\n              }\n\n              _context.prev = 11;\n\n              _this.setState({\n                addLoading: true,\n                errorMessage: ''\n              });\n\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(voting.methods.addCandidate(res.data[1].name, res.data[1].partyName).send({\n                from: accounts[0]\n              }));\n\n            case 15:\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](11);\n\n              _this.setState({\n                errorMessage: _context.t0.message\n              });\n\n            case 20:\n              _this.setState({\n                addLoading: false\n              });\n\n            case 21:\n              i++;\n              _context.next = 10;\n              break;\n\n            case 24:\n              Router.pushRoute('/');\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[11, 17]], Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function _callee2(event) {\n      var largest, index, i, winningCandidate;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event.preventDefault();\n              largest = 0;\n\n              for (i = 0; i < _this.props.number; i++) {\n                if (_this.props.candidates[i].voteCount > largest) {\n                  largest = _this.props.candidates[i].voteCount;\n                  index = i;\n                }\n              }\n\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(voting.methods.candidates(index).call());\n\n            case 5:\n              winningCandidate = _context2.sent;\n              console.log(winningCandidate);\n\n              _this.setState({\n                message: winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(votingInstance, [{\n    key: \"renderRow\",\n    value: function renderRow() {\n      return this.props.candidates.map(function (candidate, index) {\n        return __jsx(RequestRow, {\n          key: index,\n          id: index,\n          candidate: candidate\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Header = Table.Header,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Body = Table.Body;\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        floated: \"left\",\n        width: 8\n      }, __jsx(Card, {\n        fluid: true\n      }, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.address), __jsx(Card.Meta, null, \"Election Address And Number of Candidates : \", this.props.number), __jsx(Card.Description, null, \"This the Address on which the Election Contract has been deployed\")))), __jsx(Grid.Column, {\n        floated: \"right\",\n        width: 2\n      }, __jsx(Link, {\n        route: \"/votingTable\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        primary: true\n      }, \"Voter's Info\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n        primary: true,\n        icon: \"add circle\",\n        content: \"Add Candidate\",\n        onClick: this.onAddCandidates,\n        loading: this.state.addLoading\n      }), __jsx(Link, {\n        route: \"/vote\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        floated: \"right\",\n        primary: true\n      }, \"Go to Vote\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Table, {\n        celled: true,\n        textAlign: \"center\"\n      }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Candidate's ID\"), __jsx(HeaderCell, null, \"Candidate's Name\"), __jsx(HeaderCell, null, \"Candidate's Party\"), __jsx(HeaderCell, null, \"Count\"))), __jsx(Body, null, this.renderRow())))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n        primary: true,\n        loading: this.state.Loading,\n        onClick: this.onClick\n      }, \"Pick a Winner\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, this.state.message)))));\n    }\n  }]);\n\n  return votingInstance;\n}(Component);\n\n_defineProperty(votingInstance, \"getInitialProps\", function _callee3() {\n  var numCandidates, candidates;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(voting.methods.getNumCandidate().call());\n\n        case 2:\n          numCandidates = _context3.sent;\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(numCandidates)).fill().map(function (element, index) {\n            return voting.methods.candidates(index).call();\n          })));\n\n        case 5:\n          candidates = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            address: voting.options.address,\n            number: numCandidates,\n            candidates: candidates\n          });\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\n\nexport default votingInstance;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/e_voting_app/Voting App/pages/index.js"],"names":["React","Component","Layout","voting","Card","Grid","Button","Table","Link","Router","RequestRow","axios","web3","votingInstance","message","Loading","errorMessage","addLoading","event","preventDefault","eth","getAccounts","accounts","get","res","console","log","data","i","setState","methods","addCandidate","name","partyName","send","from","pushRoute","largest","props","number","candidates","voteCount","index","call","winningCandidate","map","candidate","Header","Row","HeaderCell","Body","address","onAddCandidates","state","renderRow","onClick","getNumCandidate","numCandidates","Promise","all","Array","parseInt","fill","element","options"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../Components/Layout'\r\nimport voting from '../Ethereum/voting'\r\nimport {Card, Grid, Button, Table} from 'semantic-ui-react'\r\nimport {Link, Router} from '../routes';\r\nimport RequestRow from '../Components/RequestRow'\r\nimport axios from 'axios';\r\nimport web3 from '../Ethereum/web3'\r\n\r\nclass votingInstance extends Component{\r\n\r\n    state ={\r\n        message : '',\r\n        Loading : false,\r\n        errorMessage : '',\r\n        addLoading : false\r\n    }\r\n\r\n    static getInitialProps = async () =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call();\r\n        \r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element, index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n        \r\n\r\n        return{\r\n            address : voting.options.address,\r\n            number : numCandidates,\r\n            candidates : candidates\r\n        }\r\n    }\r\n\r\n    renderRow(){\r\n        return this.props.candidates.map((candidate,index) =>{\r\n            return <RequestRow \r\n                key = {index}\r\n                id = {index}\r\n                candidate  = {candidate}\r\n            />\r\n        });\r\n    }\r\n\r\n    onAddCandidates = async(event) =>{\r\n        event.preventDefault();\r\n\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n        const res = await axios.get('http://localhost:5000/candidates');\r\n        console.log(res.data)\r\n        console.log(accounts[0]);\r\n        \r\n        for( var i = 2; i < 7; i++ ){\r\n            try{\r\n                this.setState({addLoading : true, errorMessage : ''})\r\n                await voting.methods.addCandidate(res.data[1].name,res.data[1].partyName)\r\n                .send({from : accounts[0]})\r\n            } catch(err){\r\n                this.setState({errorMessage : err.message})\r\n            }\r\n            this.setState({addLoading : false})\r\n        }  \r\n        Router.pushRoute('/');    \r\n    }\r\n\r\n    onClick = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        \r\n        var largest = 0;\r\n        var index;\r\n\r\n        for ( var i = 0 ; i < this.props.number ; i++ ){\r\n            \r\n            if(this.props.candidates[i].voteCount > largest){\r\n                largest = this.props.candidates[i].voteCount;\r\n                index = i;\r\n            }\r\n            \r\n        }\r\n\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n        console.log(winningCandidate);\r\n        this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        const { Header,Row, HeaderCell, Body } = Table; \r\n        return(\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column floated = \"left\" width = {8}>\r\n                            <Card fluid>\r\n                                <Card.Content >\r\n                                    <Card.Header>{this.props.address}</Card.Header>\r\n                                    <Card.Meta>Election Address And Number of Candidates : {this.props.number}</Card.Meta>\r\n                                    <Card.Description>This the Address on which the Election Contract has been deployed</Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column floated = 'right' width = {2}>\r\n                                <Link route = '/votingTable'>\r\n                                    <a>\r\n                                        <Button primary>Voter's Info</Button>\r\n                                    </a>\r\n                                </Link>\r\n                            </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                icon = \"add circle\"\r\n                                content = \"Add Candidate\"\r\n                                onClick = {this.onAddCandidates}\r\n                                loading = {this.state.addLoading}\r\n                            />\r\n                            <Link route = '/vote'>\r\n                                <a>\r\n                                    <Button  floated = \"right\" primary>Go to Vote</Button>    \r\n                                </a>\r\n                            </Link>\r\n                            \r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Table celled textAlign = \"center\">\r\n                                <Header>\r\n                                    <Row>\r\n                                        <HeaderCell>Candidate's ID</HeaderCell>\r\n                                        <HeaderCell>Candidate's Name</HeaderCell>\r\n                                        <HeaderCell>Candidate's Party</HeaderCell>\r\n                                        <HeaderCell>Count</HeaderCell>\r\n                                    </Row>\r\n                                </Header>\r\n                                <Body>\r\n                                    {this.renderRow()}\r\n                                </Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                loading = {this.state.Loading} \r\n                                onClick = {this.onClick}\r\n                            >\r\n                                Pick a Winner\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <h3>{this.state.message}</h3>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>    \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default votingInstance;"]},"metadata":{},"sourceType":"module"}