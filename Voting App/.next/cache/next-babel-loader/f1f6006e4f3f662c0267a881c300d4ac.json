{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport voting from '../Ethereum/voting';\nimport { Card, Grid, Button, Table } from 'semantic-ui-react';\nimport { Link } from '../routes';\nimport RequestRow from '../Components/RequestRow';\nimport axios from 'axios';\n\nvar votingInstance = /*#__PURE__*/function (_Component) {\n  _inherits(votingInstance, _Component);\n\n  var _super = _createSuper(votingInstance);\n\n  function votingInstance() {\n    var _this;\n\n    _classCallCheck(this, votingInstance);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      message: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function _callee(event) {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.get('http://localhost:5000/candidates'));\n\n            case 3:\n              res = _context.sent;\n              console.log(res.data[0]);\n              /*\r\n              var largest = 0;\r\n              var index;\r\n                for ( var i = 0 ; i < this.props.number ; i++ ){\r\n                  \r\n                  if(this.props.candidates[i].voteCount > largest){\r\n                      largest = this.props.candidates[i].voteCount;\r\n                      index = i;\r\n                  }\r\n                  \r\n              }\r\n                const winningCandidate = await voting.methods.candidates(index).call();\r\n              console.log(winningCandidate);\r\n              this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n              */\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(votingInstance, [{\n    key: \"renderRow\",\n    value: function renderRow() {\n      return this.props.candidates.map(function (candidate, index) {\n        return __jsx(RequestRow, {\n          key: index,\n          id: index,\n          candidate: candidate\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Header = Table.Header,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Body = Table.Body;\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        floated: \"left\",\n        width: 8\n      }, __jsx(Card, {\n        fluid: true\n      }, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.address), __jsx(Card.Meta, null, \"Election Address And Number of Candidates : \", this.props.number), __jsx(Card.Description, null, \"This the Address on which the Election Contract has been deployed\")))), __jsx(Grid.Column, {\n        floated: \"right\",\n        width: 2\n      }, __jsx(Link, {\n        route: \"/votingTable\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        primary: true\n      }, \"Voter's Info\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Link, {\n        route: \"/candidates/new\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        primary: true,\n        icon: \"add circle\",\n        content: \"Add Candidate\"\n      }))), __jsx(Link, {\n        route: \"/vote\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        floated: \"right\",\n        primary: true\n      }, \"Go to Vote\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Table, {\n        celled: true,\n        textAlign: \"center\"\n      }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Candidate's ID\"), __jsx(HeaderCell, null, \"Candidate's Name\"), __jsx(HeaderCell, null, \"Candidate's Party\"), __jsx(HeaderCell, null, \"Count\"))), __jsx(Body, null, this.renderRow())))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n        primary: true,\n        loading: this.state.Loading,\n        onClick: this.onClick\n      }, \"Pick a Winner\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, this.state.message)))));\n    }\n  }]);\n\n  return votingInstance;\n}(Component);\n\n_defineProperty(votingInstance, \"getInitialProps\", function _callee2() {\n  var numCandidates, candidates;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(voting.methods.getNumCandidate().call());\n\n        case 2:\n          numCandidates = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(numCandidates)).fill().map(function (element, index) {\n            return voting.methods.candidates(index).call();\n          })));\n\n        case 5:\n          candidates = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            address: voting.options.address,\n            number: numCandidates,\n            candidates: candidates\n          });\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\n\nexport default votingInstance;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/e_voting_app/Voting App/pages/index.js"],"names":["React","Component","Layout","voting","Card","Grid","Button","Table","Link","RequestRow","axios","votingInstance","message","event","preventDefault","get","res","console","log","data","props","candidates","map","candidate","index","Header","Row","HeaderCell","Body","address","number","renderRow","state","Loading","onClick","methods","getNumCandidate","call","numCandidates","Promise","all","Array","parseInt","fill","element","options"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../Components/Layout'\r\nimport voting from '../Ethereum/voting'\r\nimport {Card, Grid, Button, Table} from 'semantic-ui-react'\r\nimport {Link} from '../routes';\r\nimport RequestRow from '../Components/RequestRow'\r\nimport axios from 'axios'\r\n\r\nclass votingInstance extends Component{\r\n\r\n    state ={\r\n        message : '',\r\n    }\r\n\r\n    static getInitialProps = async () =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call();\r\n        \r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element, index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n        \r\n\r\n        return{\r\n            address : voting.options.address,\r\n            number : numCandidates,\r\n            candidates : candidates\r\n        }\r\n    }\r\n\r\n    renderRow(){\r\n        return this.props.candidates.map((candidate,index) =>{\r\n            return <RequestRow \r\n                key = {index}\r\n                id = {index}\r\n                candidate  = {candidate}\r\n            />\r\n        });\r\n    }\r\n\r\n    onClick = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        const res = await axios.get('http://localhost:5000/candidates')\r\n        console.log(res.data[0]);\r\n\r\n        /*\r\n        var largest = 0;\r\n        var index;\r\n\r\n        for ( var i = 0 ; i < this.props.number ; i++ ){\r\n            \r\n            if(this.props.candidates[i].voteCount > largest){\r\n                largest = this.props.candidates[i].voteCount;\r\n                index = i;\r\n            }\r\n            \r\n        }\r\n\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n        console.log(winningCandidate);\r\n        this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n        */\r\n    }\r\n\r\n    render(){\r\n\r\n        const { Header,Row, HeaderCell, Body } = Table; \r\n        return(\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column floated = \"left\" width = {8}>\r\n                            <Card fluid>\r\n                                <Card.Content >\r\n                                    <Card.Header>{this.props.address}</Card.Header>\r\n                                    <Card.Meta>Election Address And Number of Candidates : {this.props.number}</Card.Meta>\r\n                                    <Card.Description>This the Address on which the Election Contract has been deployed</Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column floated = 'right' width = {2}>\r\n                                <Link route = '/votingTable'>\r\n                                    <a>\r\n                                        <Button primary>Voter's Info</Button>\r\n                                    </a>\r\n                                </Link>\r\n                            </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Link route = '/candidates/new'>\r\n                                <a>\r\n                                    <Button \r\n                                        primary \r\n                                        icon = \"add circle\"\r\n                                        content = \"Add Candidate\" \r\n                                    />\r\n                                </a>\r\n                            </Link>\r\n                            <Link route = '/vote'>\r\n                                <a>\r\n                                    <Button  floated = \"right\" primary>Go to Vote</Button>    \r\n                                </a>\r\n                            </Link>\r\n                            \r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Table celled textAlign = \"center\">\r\n                                <Header>\r\n                                    <Row>\r\n                                        <HeaderCell>Candidate's ID</HeaderCell>\r\n                                        <HeaderCell>Candidate's Name</HeaderCell>\r\n                                        <HeaderCell>Candidate's Party</HeaderCell>\r\n                                        <HeaderCell>Count</HeaderCell>\r\n                                    </Row>\r\n                                </Header>\r\n                                <Body>\r\n                                    {this.renderRow()}\r\n                                </Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                loading = {this.state.Loading} \r\n                                onClick = {this.onClick}\r\n                            >\r\n                                Pick a Winner\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <h3>{this.state.message}</h3>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>    \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default votingInstance;"]},"metadata":{},"sourceType":"module"}