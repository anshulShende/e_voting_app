{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport voting from '../Ethereum/voting';\nimport { Card, Grid, Button, Table, Popup } from 'semantic-ui-react';\nimport { Link, Router } from '../routes';\nimport RequestRow from '../Components/RequestRow';\nimport axios from 'axios';\nimport web3 from '../Ethereum/web3';\n\nclass votingInstance extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      message: '',\n      Loading: false,\n      errorMessage: '',\n      addLoading: false,\n      isButtonDisabled: false,\n      popupContent: 'Click this button to add candidates'\n    });\n\n    _defineProperty(this, \"onAddCandidates\", async event => {\n      if (!this.state.isButtonDisabled) {\n        event.preventDefault();\n        const accounts = await web3.eth.getAccounts();\n        const res = await axios.get(`http://localhost:5000/candidates/${this.props.locale}`);\n        console.log(res.data);\n        console.log(accounts[0]);\n\n        for (var i = 0; i < res.data.length; i++) {\n          try {\n            this.setState({\n              addLoading: true,\n              errorMessage: ''\n            });\n            await voting.methods.addCandidate(res.data[i].name, res.data[i].partyName).send({\n              from: accounts[0]\n            });\n            Router.pushRoute(`/${this.props.locale}`);\n          } catch (err) {\n            this.setState({\n              errorMessage: err.message\n            });\n          }\n\n          this.setState({\n            addLoading: false\n          });\n        }\n\n        this.setState({\n          isButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          popupContent: 'The Candidates have been added'\n        });\n      }\n    });\n\n    _defineProperty(this, \"onClick\", async event => {\n      event.preventDefault();\n      var largest = 0;\n      var index;\n\n      for (var i = 0; i < this.props.number; i++) {\n        if (this.props.candidates[i].voteCount > largest) {\n          largest = this.props.candidates[i].voteCount;\n          index = i;\n        }\n      }\n\n      const winningCandidate = await voting.methods.candidates(index).call();\n      console.log(winningCandidate);\n      this.setState({\n        message: winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"\n      });\n    });\n  }\n\n  renderRow() {\n    return this.props.candidates.map((candidate, index) => {\n      return __jsx(RequestRow, {\n        key: index,\n        id: index,\n        candidate: candidate\n      });\n    });\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body\n    } = Table;\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      floated: \"left\",\n      width: 8\n    }, __jsx(Card, {\n      fluid: true\n    }, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.address), __jsx(Card.Meta, null, \"Election Address And Number of Candidates : \", this.props.number), __jsx(Card.Description, null, \"This the Address on which the Election Contract has been deployed\")))), __jsx(Grid.Column, {\n      floated: \"right\",\n      width: 2\n    }, __jsx(Link, {\n      route: `/${this.props.locale}/votingTable`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      primary: true\n    }, \"Voter's Info\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Popup, {\n      content: this.state.popupContent,\n      on: \"click\",\n      pinned: true,\n      trigger: __jsx(Button, {\n        primary: true,\n        icon: \"add circle\",\n        content: \"Add Candidate\",\n        onClick: this.onAddCandidates,\n        loading: this.state.addLoading\n      })\n    }), __jsx(Link, {\n      route: `/${this.props.locale}/vote`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      floated: \"right\",\n      primary: true\n    }, \"Go to Vote\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Table, {\n      celled: true,\n      textAlign: \"center\"\n    }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Candidate's ID\"), __jsx(HeaderCell, null, \"Candidate's Name\"), __jsx(HeaderCell, null, \"Candidate's Party\"), __jsx(HeaderCell, null, \"Count\"))), __jsx(Body, null, this.renderRow())))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n      primary: true,\n      loading: this.state.Loading,\n      onClick: this.onClick\n    }, \"Pick a Winner\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, this.state.message)))));\n  }\n\n}\n\n_defineProperty(votingInstance, \"getInitialProps\", async props => {\n  const numCandidates = await voting.methods.getNumCandidate().call();\n  const locale = props.query.locale;\n  const candidates = await Promise.all(Array(parseInt(numCandidates)).fill().map((element, index) => {\n    return voting.methods.candidates(index).call();\n  }));\n  return {\n    address: voting.options.address,\n    number: numCandidates,\n    candidates: candidates,\n    locale: locale\n  };\n});\n\nexport default votingInstance;","map":{"version":3,"sources":["/home/anshulshende/Desktop/Rait/e_voting_app/Voting App/pages/index.js"],"names":["React","Component","Layout","voting","Card","Grid","Button","Table","Popup","Link","Router","RequestRow","axios","web3","votingInstance","message","Loading","errorMessage","addLoading","isButtonDisabled","popupContent","event","state","preventDefault","accounts","eth","getAccounts","res","get","props","locale","console","log","data","i","length","setState","methods","addCandidate","name","partyName","send","from","pushRoute","err","largest","index","number","candidates","voteCount","winningCandidate","call","renderRow","map","candidate","render","Header","Row","HeaderCell","Body","address","onAddCandidates","onClick","numCandidates","getNumCandidate","query","Promise","all","Array","parseInt","fill","element","options"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../Components/Layout'\nimport voting from '../Ethereum/voting'\nimport {Card, Grid, Button, Table, Popup} from 'semantic-ui-react'\nimport {Link, Router} from '../routes';\nimport RequestRow from '../Components/RequestRow'\nimport axios from 'axios';\nimport web3 from '../Ethereum/web3'\n\nclass votingInstance extends Component{\n\n    state ={\n        message : '',\n        Loading : false,\n        errorMessage : '',\n        addLoading : false,\n        isButtonDisabled : false,\n        popupContent : 'Click this button to add candidates'\n    }\n\n    static getInitialProps = async (props) =>{\n\n        const numCandidates = await voting.methods.getNumCandidate().call();\n        const locale = props.query.locale;\n        \n        const candidates = await Promise.all(\n            Array(parseInt(numCandidates))\n            .fill()\n            .map((element, index) =>{\n                return voting.methods.candidates(index).call()\n            })\n        )\n\n        return{\n            address : voting.options.address,\n            number : numCandidates,\n            candidates : candidates,\n            locale : locale\n        }\n    }\n\n    renderRow(){\n        return this.props.candidates.map((candidate,index) =>{\n            return <RequestRow \n                key = {index}\n                id = {index}\n                candidate  = {candidate}\n            />\n        });\n    }\n\n    onAddCandidates = async(event) =>{\n\n        if(!this.state.isButtonDisabled){\n            event.preventDefault();\n\n            const accounts = await web3.eth.getAccounts();\n            const res = await axios.get(`http://localhost:5000/candidates/${this.props.locale}`);\n            console.log(res.data);\n            console.log(accounts[0]);\n            \n            for( var i = 0; i < res.data.length; i++ ){\n                try{\n                    this.setState({addLoading : true, errorMessage : ''})\n                    await voting.methods.addCandidate(res.data[i].name,res.data[i].partyName)\n                    .send({from : accounts[0]})\n                    Router.pushRoute(`/${this.props.locale}`);\n                } catch(err){\n                    this.setState({errorMessage : err.message})\n                }\n                this.setState({addLoading : false})\n            }     \n            this.setState({isButtonDisabled : true})\n        }\n        else{\n            this.setState({popupContent : 'The Candidates have been added'})\n        }\n        \n    }\n\n    onClick = async(event) =>{\n        event.preventDefault();\n        \n        var largest = 0;\n        var index;\n\n        for ( var i = 0 ; i < this.props.number ; i++ ){\n            \n            if(this.props.candidates[i].voteCount > largest){\n                largest = this.props.candidates[i].voteCount;\n                index = i;\n            }\n            \n        }\n\n        const winningCandidate = await voting.methods.candidates(index).call();\n        console.log(winningCandidate);\n        this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\n        \n    }\n\n    render(){\n\n        const { Header,Row, HeaderCell, Body } = Table; \n        return(\n            <Layout>\n                <Grid>\n                    <Grid.Row>\n                        <Grid.Column floated = \"left\" width = {8}>\n                            <Card fluid>\n                                <Card.Content >\n                                    <Card.Header>{this.props.address}</Card.Header>\n                                    <Card.Meta>Election Address And Number of Candidates : {this.props.number}</Card.Meta>\n                                    <Card.Description>This the Address on which the Election Contract has been deployed</Card.Description>\n                                </Card.Content>\n                            </Card>\n                        </Grid.Column>\n                        <Grid.Column floated = 'right' width = {2}>\n                                <Link route = {`/${this.props.locale}/votingTable`}>\n                                    <a>\n                                        <Button primary>Voter's Info</Button>\n                                    </a>\n                                </Link>\n                            </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Popup\n                                content = {this.state.popupContent}\n                                on = \"click\"\n                                pinned\n                                trigger = {<Button \n                                    primary \n                                    icon = \"add circle\"\n                                    content = \"Add Candidate\"\n                                    onClick = {this.onAddCandidates}\n                                    loading = {this.state.addLoading}\n                                    />}\n                            />\n                            <Link route = {`/${this.props.locale}/vote`}>\n                                <a>\n                                    <Button  floated = \"right\" primary>Go to Vote</Button>    \n                                </a>\n                            </Link>\n                            \n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Table celled textAlign = \"center\">\n                                <Header>\n                                    <Row>\n                                        <HeaderCell>Candidate's ID</HeaderCell>\n                                        <HeaderCell>Candidate's Name</HeaderCell>\n                                        <HeaderCell>Candidate's Party</HeaderCell>\n                                        <HeaderCell>Count</HeaderCell>\n                                    </Row>\n                                </Header>\n                                <Body>\n                                    {this.renderRow()}\n                                </Body>\n                            </Table>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Button \n                                primary \n                                loading = {this.state.Loading} \n                                onClick = {this.onClick}\n                            >\n                                Pick a Winner\n                            </Button>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <h3>{this.state.message}</h3>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>    \n            </Layout>\n        );\n    }\n}\n\nexport default votingInstance;"]},"metadata":{},"sourceType":"module"}