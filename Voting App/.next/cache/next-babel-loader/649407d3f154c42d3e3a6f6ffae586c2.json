{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport voting from '../Ethereum/voting';\nimport { Card, Grid, Button, Table, Popup } from 'semantic-ui-react';\nimport { Link, Router } from '../routes';\nimport RequestRow from '../Components/RequestRow';\nimport axios from 'axios';\nimport web3 from '../Ethereum/web3';\n\nclass votingInstance extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      message: '',\n      Loading: false,\n      errorMessage: '',\n      addLoading: false,\n      isButtonDisabled: false,\n      popupContent: 'Click this button to add candidates'\n    });\n\n    _defineProperty(this, \"onAddCandidates\", async event => {\n      if (!this.state.isButtonDisabled) {\n        event.preventDefault();\n        const accounts = await web3.eth.getAccounts();\n        const res = await axios.get('http://localhost:5000/candidates');\n        console.log(res.data);\n        console.log(accounts[0]);\n\n        for (var i = 2; i < 7; i++) {\n          try {\n            this.setState({\n              addLoading: true,\n              errorMessage: ''\n            });\n            await voting.methods.addCandidate(res.data[i].name, res.data[i].partyName).send({\n              from: accounts[0]\n            });\n            Router.pushRoute('/');\n          } catch (err) {\n            this.setState({\n              errorMessage: err.message\n            });\n          }\n\n          this.setState({\n            addLoading: false\n          });\n        }\n\n        this.setState({\n          isButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          popupContent: 'The Candidates have been added'\n        });\n      }\n    });\n\n    _defineProperty(this, \"onClick\", async event => {\n      event.preventDefault();\n      console.log(this.props.locale);\n      /*\r\n      var largest = 0;\r\n      var index;\r\n        for ( var i = 0 ; i < this.props.number ; i++ ){\r\n          \r\n          if(this.props.candidates[i].voteCount > largest){\r\n              largest = this.props.candidates[i].voteCount;\r\n              index = i;\r\n          }\r\n          \r\n      }\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n      console.log(winningCandidate);\r\n      this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n      */\n    });\n  }\n\n  renderRow() {\n    return this.props.candidates.map((candidate, index) => {\n      return __jsx(RequestRow, {\n        key: index,\n        id: index,\n        candidate: candidate\n      });\n    });\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body\n    } = Table;\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      floated: \"left\",\n      width: 8\n    }, __jsx(Card, {\n      fluid: true\n    }, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.address), __jsx(Card.Meta, null, \"Election Address And Number of Candidates : \", this.props.number), __jsx(Card.Description, null, \"This the Address on which the Election Contract has been deployed\")))), __jsx(Grid.Column, {\n      floated: \"right\",\n      width: 2\n    }, __jsx(Link, {\n      route: \"/votingTable\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      primary: true\n    }, \"Voter's Info\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Popup, {\n      content: true,\n      trigger: __jsx(Button, {\n        primary: true,\n        icon: \"add circle\",\n        content: \"Add Candidate\",\n        onClick: this.onAddCandidates,\n        loading: this.state.addLoading\n      })\n    }), __jsx(Link, {\n      route: \"/vote\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      floated: \"right\",\n      primary: true\n    }, \"Go to Vote\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Table, {\n      celled: true,\n      textAlign: \"center\"\n    }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Candidate's ID\"), __jsx(HeaderCell, null, \"Candidate's Name\"), __jsx(HeaderCell, null, \"Candidate's Party\"), __jsx(HeaderCell, null, \"Count\"))), __jsx(Body, null, this.renderRow())))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n      primary: true,\n      loading: this.state.Loading,\n      onClick: this.onClick\n    }, \"Pick a Winner\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, this.state.message)))));\n  }\n\n}\n\n_defineProperty(votingInstance, \"getInitialProps\", async props => {\n  const numCandidates = await voting.methods.getNumCandidate().call();\n  const locale = props.query.locale;\n  const candidates = await Promise.all(Array(parseInt(numCandidates)).fill().map((element, index) => {\n    return voting.methods.candidates(index).call();\n  }));\n  return {\n    address: voting.options.address,\n    number: numCandidates,\n    candidates: candidates,\n    locale: locale\n  };\n});\n\nexport default votingInstance;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/e_voting_app/Voting App/pages/index.js"],"names":["React","Component","Layout","voting","Card","Grid","Button","Table","Popup","Link","Router","RequestRow","axios","web3","votingInstance","message","Loading","errorMessage","addLoading","isButtonDisabled","popupContent","event","state","preventDefault","accounts","eth","getAccounts","res","get","console","log","data","i","setState","methods","addCandidate","name","partyName","send","from","pushRoute","err","props","locale","renderRow","candidates","map","candidate","index","render","Header","Row","HeaderCell","Body","address","number","onAddCandidates","onClick","numCandidates","getNumCandidate","call","query","Promise","all","Array","parseInt","fill","element","options"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../Components/Layout'\r\nimport voting from '../Ethereum/voting'\r\nimport {Card, Grid, Button, Table, Popup} from 'semantic-ui-react'\r\nimport {Link, Router} from '../routes';\r\nimport RequestRow from '../Components/RequestRow'\r\nimport axios from 'axios';\r\nimport web3 from '../Ethereum/web3'\r\n\r\nclass votingInstance extends Component{\r\n\r\n    state ={\r\n        message : '',\r\n        Loading : false,\r\n        errorMessage : '',\r\n        addLoading : false,\r\n        isButtonDisabled : false,\r\n        popupContent : 'Click this button to add candidates'\r\n    }\r\n\r\n    static getInitialProps = async (props) =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call();\r\n        const locale = props.query.locale;\r\n        \r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element, index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n\r\n        return{\r\n            address : voting.options.address,\r\n            number : numCandidates,\r\n            candidates : candidates,\r\n            locale : locale\r\n        }\r\n    }\r\n\r\n    renderRow(){\r\n        return this.props.candidates.map((candidate,index) =>{\r\n            return <RequestRow \r\n                key = {index}\r\n                id = {index}\r\n                candidate  = {candidate}\r\n            />\r\n        });\r\n    }\r\n\r\n    onAddCandidates = async(event) =>{\r\n\r\n        if(!this.state.isButtonDisabled){\r\n            event.preventDefault();\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n            const res = await axios.get('http://localhost:5000/candidates');\r\n            console.log(res.data)\r\n            console.log(accounts[0]);\r\n            \r\n            for( var i = 2; i < 7; i++ ){\r\n                try{\r\n                    this.setState({addLoading : true, errorMessage : ''})\r\n                    await voting.methods.addCandidate(res.data[i].name,res.data[i].partyName)\r\n                    .send({from : accounts[0]})\r\n                    Router.pushRoute('/');\r\n                } catch(err){\r\n                    this.setState({errorMessage : err.message})\r\n                }\r\n                this.setState({addLoading : false})\r\n            }     \r\n            this.setState({isButtonDisabled : true})\r\n        }\r\n        else{\r\n            this.setState({popupContent : 'The Candidates have been added'})\r\n        }\r\n        \r\n    }\r\n\r\n    onClick = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        console.log(this.props.locale);\r\n        /*\r\n        var largest = 0;\r\n        var index;\r\n\r\n        for ( var i = 0 ; i < this.props.number ; i++ ){\r\n            \r\n            if(this.props.candidates[i].voteCount > largest){\r\n                largest = this.props.candidates[i].voteCount;\r\n                index = i;\r\n            }\r\n            \r\n        }\r\n\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n        console.log(winningCandidate);\r\n        this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n        */\r\n    }\r\n\r\n    render(){\r\n\r\n        const { Header,Row, HeaderCell, Body } = Table; \r\n        return(\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column floated = \"left\" width = {8}>\r\n                            <Card fluid>\r\n                                <Card.Content >\r\n                                    <Card.Header>{this.props.address}</Card.Header>\r\n                                    <Card.Meta>Election Address And Number of Candidates : {this.props.number}</Card.Meta>\r\n                                    <Card.Description>This the Address on which the Election Contract has been deployed</Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column floated = 'right' width = {2}>\r\n                                <Link route = '/votingTable'>\r\n                                    <a>\r\n                                        <Button primary>Voter's Info</Button>\r\n                                    </a>\r\n                                </Link>\r\n                            </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Popup\r\n                                content\r\n                                trigger = {<Button \r\n                                    primary \r\n                                    icon = \"add circle\"\r\n                                    content = \"Add Candidate\"\r\n                                    onClick = {this.onAddCandidates}\r\n                                    loading = {this.state.addLoading}\r\n                                    />}\r\n                            />\r\n                            <Link route = '/vote'>\r\n                                <a>\r\n                                    <Button  floated = \"right\" primary>Go to Vote</Button>    \r\n                                </a>\r\n                            </Link>\r\n                            \r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Table celled textAlign = \"center\">\r\n                                <Header>\r\n                                    <Row>\r\n                                        <HeaderCell>Candidate's ID</HeaderCell>\r\n                                        <HeaderCell>Candidate's Name</HeaderCell>\r\n                                        <HeaderCell>Candidate's Party</HeaderCell>\r\n                                        <HeaderCell>Count</HeaderCell>\r\n                                    </Row>\r\n                                </Header>\r\n                                <Body>\r\n                                    {this.renderRow()}\r\n                                </Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                loading = {this.state.Loading} \r\n                                onClick = {this.onClick}\r\n                            >\r\n                                Pick a Winner\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <h3>{this.state.message}</h3>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>    \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default votingInstance;"]},"metadata":{},"sourceType":"module"}