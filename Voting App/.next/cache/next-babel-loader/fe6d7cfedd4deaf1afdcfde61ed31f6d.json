{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport voting from '../Ethereum/voting';\nimport { Card, Grid, Button, Table } from 'semantic-ui-react';\nimport { Link } from '../routes';\nimport RequestRow from '../Components/RequestRow';\nimport axios from 'axios';\nimport web3 from '../Ethereum/web3';\n\nclass votingInstance extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      message: '',\n      Loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"onAddCandidates\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      const res = await axios.get('http://localhost:5000/candidates');\n      console.log(res.data);\n      console.log(accounts[0]);\n\n      for (var i = 0; i < 7; i++) {\n        try {\n          this.setS;\n          await voting.methods.addCandidate(res.data[i].name, res.data[i].partyName).send({\n            from: accounts[0]\n          });\n        } catch (err) {}\n      }\n    });\n\n    _defineProperty(this, \"onClick\", async event => {\n      event.preventDefault();\n      var largest = 0;\n      var index;\n\n      for (var i = 0; i < this.props.number; i++) {\n        if (this.props.candidates[i].voteCount > largest) {\n          largest = this.props.candidates[i].voteCount;\n          index = i;\n        }\n      }\n\n      const winningCandidate = await voting.methods.candidates(index).call();\n      console.log(winningCandidate);\n      this.setState({\n        message: winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"\n      });\n    });\n  }\n\n  renderRow() {\n    return this.props.candidates.map((candidate, index) => {\n      return __jsx(RequestRow, {\n        key: index,\n        id: index,\n        candidate: candidate\n      });\n    });\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body\n    } = Table;\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      floated: \"left\",\n      width: 8\n    }, __jsx(Card, {\n      fluid: true\n    }, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.address), __jsx(Card.Meta, null, \"Election Address And Number of Candidates : \", this.props.number), __jsx(Card.Description, null, \"This the Address on which the Election Contract has been deployed\")))), __jsx(Grid.Column, {\n      floated: \"right\",\n      width: 2\n    }, __jsx(Link, {\n      route: \"/votingTable\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      primary: true\n    }, \"Voter's Info\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n      primary: true,\n      icon: \"add circle\",\n      content: \"Add Candidate\",\n      onClick: this.onAddCandidates\n    }), __jsx(Link, {\n      route: \"/vote\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      floated: \"right\",\n      primary: true\n    }, \"Go to Vote\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Table, {\n      celled: true,\n      textAlign: \"center\"\n    }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Candidate's ID\"), __jsx(HeaderCell, null, \"Candidate's Name\"), __jsx(HeaderCell, null, \"Candidate's Party\"), __jsx(HeaderCell, null, \"Count\"))), __jsx(Body, null, this.renderRow())))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Button, {\n      primary: true,\n      loading: this.state.Loading,\n      onClick: this.onClick\n    }, \"Pick a Winner\"))), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(\"h3\", null, this.state.message)))));\n  }\n\n}\n\n_defineProperty(votingInstance, \"getInitialProps\", async () => {\n  const numCandidates = await voting.methods.getNumCandidate().call();\n  const candidates = await Promise.all(Array(parseInt(numCandidates)).fill().map((element, index) => {\n    return voting.methods.candidates(index).call();\n  }));\n  return {\n    address: voting.options.address,\n    number: numCandidates,\n    candidates: candidates\n  };\n});\n\nexport default votingInstance;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/e_voting_app/Voting App/pages/index.js"],"names":["React","Component","Layout","voting","Card","Grid","Button","Table","Link","RequestRow","axios","web3","votingInstance","message","Loading","errorMessage","event","preventDefault","accounts","eth","getAccounts","res","get","console","log","data","i","setS","methods","addCandidate","name","partyName","send","from","err","largest","index","props","number","candidates","voteCount","winningCandidate","call","setState","renderRow","map","candidate","render","Header","Row","HeaderCell","Body","address","onAddCandidates","state","onClick","numCandidates","getNumCandidate","Promise","all","Array","parseInt","fill","element","options"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../Components/Layout'\r\nimport voting from '../Ethereum/voting'\r\nimport {Card, Grid, Button, Table} from 'semantic-ui-react'\r\nimport {Link} from '../routes';\r\nimport RequestRow from '../Components/RequestRow'\r\nimport axios from 'axios';\r\nimport web3 from '../Ethereum/web3'\r\n\r\nclass votingInstance extends Component{\r\n\r\n    state ={\r\n        message : '',\r\n        Loading : false,\r\n        errorMessage : ''\r\n    }\r\n\r\n    static getInitialProps = async () =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call();\r\n        \r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element, index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n        \r\n\r\n        return{\r\n            address : voting.options.address,\r\n            number : numCandidates,\r\n            candidates : candidates\r\n        }\r\n    }\r\n\r\n    renderRow(){\r\n        return this.props.candidates.map((candidate,index) =>{\r\n            return <RequestRow \r\n                key = {index}\r\n                id = {index}\r\n                candidate  = {candidate}\r\n            />\r\n        });\r\n    }\r\n\r\n    onAddCandidates = async(event) =>{\r\n        event.preventDefault();\r\n\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n        const res = await axios.get('http://localhost:5000/candidates');\r\n        console.log(res.data)\r\n        console.log(accounts[0]);\r\n        \r\n        for( var i = 0; i < 7; i++ ){\r\n            try{\r\n                this.setS\r\n                await voting.methods.addCandidate(res.data[i].name,res.data[i].partyName)\r\n                .send({from : accounts[0]})\r\n            } catch(err){\r\n\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    onClick = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        \r\n        var largest = 0;\r\n        var index;\r\n\r\n        for ( var i = 0 ; i < this.props.number ; i++ ){\r\n            \r\n            if(this.props.candidates[i].voteCount > largest){\r\n                largest = this.props.candidates[i].voteCount;\r\n                index = i;\r\n            }\r\n            \r\n        }\r\n\r\n        const winningCandidate = await voting.methods.candidates(index).call();\r\n        console.log(winningCandidate);\r\n        this.setState({message : winningCandidate[0] + \" belonging to the party \" + winningCandidate[1] + \" has won with \" + winningCandidate[2] + \" votes \"})\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        const { Header,Row, HeaderCell, Body } = Table; \r\n        return(\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column floated = \"left\" width = {8}>\r\n                            <Card fluid>\r\n                                <Card.Content >\r\n                                    <Card.Header>{this.props.address}</Card.Header>\r\n                                    <Card.Meta>Election Address And Number of Candidates : {this.props.number}</Card.Meta>\r\n                                    <Card.Description>This the Address on which the Election Contract has been deployed</Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column floated = 'right' width = {2}>\r\n                                <Link route = '/votingTable'>\r\n                                    <a>\r\n                                        <Button primary>Voter's Info</Button>\r\n                                    </a>\r\n                                </Link>\r\n                            </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                icon = \"add circle\"\r\n                                content = \"Add Candidate\"\r\n                                onClick = {this.onAddCandidates}\r\n                            />\r\n                            <Link route = '/vote'>\r\n                                <a>\r\n                                    <Button  floated = \"right\" primary>Go to Vote</Button>    \r\n                                </a>\r\n                            </Link>\r\n                            \r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Table celled textAlign = \"center\">\r\n                                <Header>\r\n                                    <Row>\r\n                                        <HeaderCell>Candidate's ID</HeaderCell>\r\n                                        <HeaderCell>Candidate's Name</HeaderCell>\r\n                                        <HeaderCell>Candidate's Party</HeaderCell>\r\n                                        <HeaderCell>Count</HeaderCell>\r\n                                    </Row>\r\n                                </Header>\r\n                                <Body>\r\n                                    {this.renderRow()}\r\n                                </Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Button \r\n                                primary \r\n                                loading = {this.state.Loading} \r\n                                onClick = {this.onClick}\r\n                            >\r\n                                Pick a Winner\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <h3>{this.state.message}</h3>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>    \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default votingInstance;"]},"metadata":{},"sourceType":"module"}