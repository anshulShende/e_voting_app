{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../Components/Layout';\nimport { Link } from '../routes';\nimport { Grid, Card, Input, Form, Button, Message } from 'semantic-ui-react';\nimport voting from '../Ethereum/voting';\nimport web3 from '../Ethereum/web3';\n\nclass votingPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      id: '',\n      Loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"renderCandidates\", () => {\n      const items = this.props.candidates.map((candidate, index) => {\n        return {\n          header: candidate.name,\n          meta: index,\n          description: candidate.partyName\n        };\n      });\n      return __jsx(Card.Group, {\n        textAlign: \"center\",\n        centered: true,\n        items: items\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        Loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        await voting.methods.vote(this.state.id).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        Loading: false,\n        id: ''\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null);\n  }\n\n}\n\n_defineProperty(votingPage, \"getInitialProps\", async props => {\n  const numCandidates = await voting.methods.getNumCandidate().call();\n  const candidates = await Promise.all(Array(parseInt(numCandidates)).fill().map((element, index) => {\n    return voting.methods.candidates(index).call();\n  }));\n  return {\n    numCandidates: numCandidates,\n    candidates: candidates\n  };\n});\n\nexport default votingPage;","map":{"version":3,"sources":["C:/Users/mappa/Desktop/Project/Voting App/pages/vote.js"],"names":["React","Component","Layout","Link","Grid","Card","Input","Form","Button","Message","voting","web3","votingPage","id","Loading","errorMessage","items","props","candidates","map","candidate","index","header","name","meta","description","partyName","event","preventDefault","accounts","eth","getAccounts","setState","methods","vote","state","send","from","err","message","render","numCandidates","getNumCandidate","call","Promise","all","Array","parseInt","fill","element"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,IAAR,QAAmB,WAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,MAAlC,EAA0CC,OAA1C,QAAyD,mBAAzD;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;AAEA,MAAMC,UAAN,SAAyBX,SAAzB,CAAmC;AAAA;AAAA;;AAAA,mCAEvB;AACJY,MAAAA,EAAE,EAAG,EADD;AAEJC,MAAAA,OAAO,EAAG,KAFN;AAGJC,MAAAA,YAAY,EAAG;AAHX,KAFuB;;AAAA,8CA0BZ,MAAK;AACpB,YAAMC,KAAK,GAAI,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,GAAtB,CAA0B,CAACC,SAAD,EAAWC,KAAX,KAAoB;AACzD,eAAM;AACFC,UAAAA,MAAM,EAAGF,SAAS,CAACG,IADjB;AAEFC,UAAAA,IAAI,EAAGH,KAFL;AAGFI,UAAAA,WAAW,EAAGL,SAAS,CAACM;AAHtB,SAAN;AAKH,OANc,CAAf;AAQA,aAAO,MAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAG,QAAxB;AAAiC,QAAA,QAAQ,MAAzC;AAA0C,QAAA,KAAK,EAAIV;AAAnD,QAAP;AACH,KApC8B;;AAAA,sCAsCpB,MAAMW,KAAN,IAAe;AACtBA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAMC,QAAQ,GAAG,MAAMlB,IAAI,CAACmB,GAAL,CAASC,WAAT,EAAvB;AAEA,WAAKC,QAAL,CAAc;AAAClB,QAAAA,OAAO,EAAG,IAAX;AAAiBC,QAAAA,YAAY,EAAG;AAAhC,OAAd;;AAEA,UAAG;AACC,cAAML,MAAM,CAACuB,OAAP,CAAeC,IAAf,CAAoB,KAAKC,KAAL,CAAWtB,EAA/B,EAAmCuB,IAAnC,CAAwC;AAC1CC,UAAAA,IAAI,EAAGR,QAAQ,CAAC,CAAD;AAD2B,SAAxC,CAAN;AAGH,OAJD,CAIC,OAAMS,GAAN,EAAU;AACP,aAAKN,QAAL,CAAc;AAACjB,UAAAA,YAAY,EAAGuB,GAAG,CAACC;AAApB,SAAd;AACH;;AAED,WAAKP,QAAL,CAAc;AAAClB,QAAAA,OAAO,EAAG,KAAX;AAAkBD,QAAAA,EAAE,EAAG;AAAvB,OAAd;AACH,KAtD8B;AAAA;;AAwD/B2B,EAAAA,MAAM,GAAE;AACJ,WACI,MAAC,MAAD,OADJ;AAKH;;AA9D8B;;gBAA7B5B,U,qBAQuB,MAAOK,KAAP,IAAgB;AAErC,QAAMwB,aAAa,GAAG,MAAM/B,MAAM,CAACuB,OAAP,CAAeS,eAAf,GAAiCC,IAAjC,EAA5B;AAEA,QAAMzB,UAAU,GAAG,MAAM0B,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACN,aAAD,CAAT,CAAL,CACCO,IADD,GAEC7B,GAFD,CAEK,CAAC8B,OAAD,EAAS5B,KAAT,KAAkB;AACnB,WAAOX,MAAM,CAACuB,OAAP,CAAef,UAAf,CAA0BG,KAA1B,EAAiCsB,IAAjC,EAAP;AACH,GAJD,CADqB,CAAzB;AAQA,SAAO;AACHF,IAAAA,aAAa,EAAGA,aADb;AAEHvB,IAAAA,UAAU,EAAGA;AAFV,GAAP;AAIH,C;;AAyCL,eAAeN,UAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport Layout from '../Components/Layout'\r\nimport {Link} from '../routes'\r\nimport { Grid, Card, Input, Form, Button, Message } from 'semantic-ui-react'\r\nimport voting from '../Ethereum/voting'\r\nimport web3 from '../Ethereum/web3'\r\n\r\nclass votingPage extends Component {\r\n\r\n    state = {\r\n        id : '',\r\n        Loading : false,\r\n        errorMessage : ''\r\n    }\r\n\r\n    static getInitialProps = async (props) =>{\r\n\r\n        const numCandidates = await voting.methods.getNumCandidate().call()\r\n\r\n        const candidates = await Promise.all(\r\n            Array(parseInt(numCandidates))\r\n            .fill()\r\n            .map((element,index) =>{\r\n                return voting.methods.candidates(index).call()\r\n            })\r\n        )\r\n\r\n        return {\r\n            numCandidates : numCandidates,\r\n            candidates : candidates,\r\n        }\r\n    }\r\n\r\n    renderCandidates = () =>{\r\n        const items =  this.props.candidates.map((candidate,index) =>{\r\n            return{\r\n                header : candidate.name,\r\n                meta : index,\r\n                description : candidate.partyName\r\n            }\r\n        });\r\n\r\n        return <Card.Group textAlign = \"center\" centered items = {items} />\r\n    }\r\n\r\n    onSubmit = async(event) =>{\r\n        event.preventDefault();\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        this.setState({Loading : true, errorMessage : ''})\r\n\r\n        try{\r\n            await voting.methods.vote(this.state.id).send({\r\n                from : accounts[0]\r\n            })\r\n        }catch(err){\r\n            this.setState({errorMessage : err.message})\r\n        }\r\n        \r\n        this.setState({Loading : false, id : ''})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Layout>\r\n                \r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default votingPage;"]},"metadata":{},"sourceType":"module"}